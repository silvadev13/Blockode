name: Android CI

on:
  push:
    branches: [ "**" ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ "**" ]
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:

jobs:
  build:
    name: Build Blockode
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
        
      - name: Build Blockode Release
        run: ./gradlew assembleRelease

      - name: Upload release app
        uses: actions/upload-artifact@v4
        with:
          name: blockode-release
          path: app/build/outputs/apk/release/
          
  send-to-telegram:
    name: Send APK to Telegram
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install telethon
      
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: blockode-release
        continue-on-error: true 
          
      - name: List all files in repo
        run: ls
      
      - name: Get git commit info
        id: gh_info
        run: |
            echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV
            echo "BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
            echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            version_code=$(grep "versionCode = " app/build.gradle.kts | awk '{print $3}' | tr -d '\n')
            app_version=$(grep 'val app_version' app/build.gradle.kts | awk -F'"' '{print $2}')
            echo "VERSION_CODE=$version_code" >> $GITHUB_ENV
            echo "APP_VERSION=$app_version" >> $GITHUB_ENV
            
      - name: Rename release apk file 
        run: |
          mv app-release.apk blockode-release-build-${{ env.APP_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH }}.apk
          ls 
        continue-on-error: true 
          
      - name: Send APK to Telegram
        env:
          API_ID: ${{ secrets.TG_API_ID }}
          API_HASH: ${{ secrets.TG_API_HASH }}
          BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          APK_TO_SEND: blockode-release-build-${{ env.APP_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH }}.apk
          DESCRIPTION: |
            **${{ github.actor }}** committed to [${{ github.repository }}](https://github.com/${{ github.repository }})

            Branch: **${{ env.BRANCH_NAME }}**
            Commit message: `${{ env.COMMIT_MESSAGE }}`
        run: python .github/telegram/send_apk.py
        continue-on-error: true